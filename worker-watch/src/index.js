const { initDI } = require('./di')
const { name } = require('../package.json')
const config = require('./config')
const logger = require('./logger')
const listener = require('./listener')
const Queue = require('./queue')
const models = require('./models')
const { connect } = require('./database')
const helper = require('./helper')
const repo = require('./repo')
const EventEmitter = require('events').EventEmitter
const mediator = new EventEmitter()
logger.d(`${name} Service`)
mediator.once('di.ready', async container => {
  console.log('di.ready, starting connect db ', config.dbSettings)
  console.log('di.ready, starting connect rabbit ', config.rabbitConfig)
  container.registerValue('logger', logger)
  container.registerValue('mediator', mediator)
  container.registerValue('config', config)
  mediator.once('db.ready', async db => {
    logger.d('db.ready, starting server')

    container.registerValue('db', db)
    container.registerValue('models', models(container))
    const repository = repo.connect(container)
    container.registerValue('repo', repository)
    container.registerValue('helper', helper(container))
    const channel = await Queue.createChannel(config.rabbitConfig)
    logger.d(config.workerConfig)
    container.registerValue('queue', {subscriber: new Queue.Subscriber(channel, config.workerConfig.queueName, config.workerConfig.exchange, config.workerConfig.exchangeType)})
    listener.start(container)
  })
  connect(container, mediator)
})
initDI(mediator)
